- if policy(content_plan).edit?
  = link_to "edit", [:edit, content_plan], class: 'btn pull-right'
= link_to "history", [:versions, content_plan], class: 'btn pull-right history-btn'
- if all_records_are_live?
  = link_to "Excel export", xls_export_content_plan_path(content_plan.id), class: 'btn pull-right'

= breadcrumb ["Content Plans", content_plans_path], content_plan.name
.row
  .span12
    ul class="organisations-icon-list organisation"
      - content_plan.organisations.each do |organisation|
        li class=(organisation.organisation_brand_colour_class_name.to_s + "-brand-colour")
          a class=(logo_classes(class_name: organisation.organisation_logo_type_class_name, organisation: organisation, size: 'medium'))
            span
              = organisation_logo_name(organisation, content_plan.organisations.count == 1)
.row
  .span8
    h2
      = content_plan.name
    dl.metadata
      - if content_plan.size.present?
        dt Size:
        dd
          = content_plan.size
      - if content_plan.need_ids.present?
        dt User Needs:
        dd
          = user_needs_links content_plan.need_ids
      - if content_plan.users.any?
        dt Users:
        dd
          = content_user_links content_plan.users
      - if content_plan.tag_list.present?
        dt Tags:
        dd
          = content_plan_tag_filters content_plan.tag_list
      - if content_plan.due_date.present?
        dt Due:
        dd
          = content_plan.due_date
      - if content_plan.organisations.any?
        dt Organisations:
        dd
          = content_plan.organisations.map(&:title).join("<br />").html_safe
  .span4.content-plans
    .tag-box.mini
      h4 Status
      - %w(Mainstream Specialist).each do |platform|
        - cache([platform, content_plan, params[:q], params[:year], params[:organisation]], expires_in: 1.hour) do
          - if content_plan.contents.where(platform: platform).any?
            .platform
              = platform
              .progress
                - Content.percentages_for(platform: platform, contents: content_plan.contents).each do |status, results|
                    div[class="status status-#{status.parameterize}" style="width: #{results[1]}%" title="#{status}: #{results[1]}% (#{results[0]} items)" data-tooltip=true data-placement="bottom"]
.row
  .span12
    .content-plan-details
      .inner
        = govspeak content_plan.details

        - if content_plan.notes.present?
          h4 Notes
          = govspeak content_plan.notes
.row
  .span8
      h4
        | Content Records
        = link_to "Add content", new_content_path(content_plan_id: content_plan.id), class: "btn btn-mini contents-btn"
      table.table
        thead
          th.title Title
          th.size Size
          th.status Status
          th.platform Platform
          th.publish_by Publish by
        tbody
          - content_plan.contents.each do |content|
            tr
              td
                = link_to content, content
              td
                = content.size
              td
                = content.status
              td
                = link_to content.platform, content.url, rel: "external", target: "_blank"
              td
                - if content.publish_by.present?
                  = l content.publish_by


  .span4.tasks-comments
    .inner
      h4 Tasks
      = render "tasks/form"

      ul.tasks
        = render content_plan.tasks

      h4 Comments
      = render "comments/form"

      ul.comments
        = render content_plan.comments
